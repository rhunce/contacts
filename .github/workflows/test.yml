name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: contacts_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        run: cd backend && npm ci

      - name: Setup test database
        run: |
          cd backend
          echo "DATABASE_URL=postgresql://postgres:test@localhost:5432/contacts_test" > .env.test
          echo "TEST_DATABASE_URL=postgresql://postgres:test@localhost:5432/contacts_test" >> .env.test
          npx prisma generate
          npx prisma db push --schema=./prisma/schema.prisma

      - name: Run backend unit tests
        run: cd backend && npm run test:unit
        env:
          DATABASE_URL: postgresql://postgres:test@localhost:5432/contacts_test
          TEST_DATABASE_URL: postgresql://postgres:test@localhost:5432/contacts_test

      - name: Run backend integration tests
        run: cd backend && npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:test@localhost:5432/contacts_test
          TEST_DATABASE_URL: postgresql://postgres:test@localhost:5432/contacts_test

      - name: Run backend E2E tests
        run: cd backend && npm run test:e2e
        env:
          DATABASE_URL: postgresql://postgres:test@localhost:5432/contacts_test
          TEST_DATABASE_URL: postgresql://postgres:test@localhost:5432/contacts_test

      - name: Cleanup test database
        if: always()
        run: |
          cd backend
          npx prisma db push --force-reset --schema=./prisma/schema.prisma
        env:
          DATABASE_URL: postgresql://postgres:test@localhost:5432/contacts_test

      - name: Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  test-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: cd frontend && npm ci

      - name: Run frontend unit tests
        run: cd frontend && npm run test:unit

      - name: Run frontend integration tests
        run: cd frontend && npm run test:integration

      - name: Run frontend E2E tests
        run: cd frontend && npm run test:e2e

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  test-combined:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run all tests
        run: |
          echo "All tests completed successfully!"
          echo "Backend and frontend tests passed"

      - name: Test Summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ Backend Unit Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "✅ Backend Integration Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "✅ Backend E2E Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "✅ Frontend Unit Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "✅ Frontend Integration Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "✅ Frontend E2E Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: Unit, Integration, and E2E tests" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: Unit, Integration, and E2E tests" >> $GITHUB_STEP_SUMMARY
          echo "- Priority areas covered: Authentication, CRUD operations, Error handling, Security, User flows" >> $GITHUB_STEP_SUMMARY
