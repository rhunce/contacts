name: Deploy Full Stack

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    outputs:
      alb-url: ${{ steps.deploy.outputs.alb-url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: infra/package-lock.json

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.CDK_DEFAULT_REGION }}

    - name: Install dependencies
      working-directory: ./infra
      run: npm ci

    - name: CDK Bootstrap
      working-directory: ./infra
      run: npx cdk bootstrap aws://${{ secrets.CDK_DEFAULT_ACCOUNT }}/${{ vars.CDK_DEFAULT_REGION }}
      env:
        CDK_DEFAULT_ACCOUNT: ${{ secrets.CDK_DEFAULT_ACCOUNT }}
        CDK_DEFAULT_REGION: ${{ vars.CDK_DEFAULT_REGION }}
        APP_NAME: ${{ vars.APP_NAME }}
      continue-on-error: true

    - name: Deploy Backend Stack
      id: deploy
      working-directory: ./infra
      run: |
        npx cdk deploy ${APP_NAME}BackendStack --require-approval never
        ALB_URL=$(aws cloudformation describe-stacks --stack-name ${APP_NAME}BackendStack --query 'Stacks[0].Outputs[?OutputKey==`AlbUrl`].OutputValue' --output text)
        echo "alb-url=$ALB_URL" >> $GITHUB_OUTPUT
      env:
        CDK_DEFAULT_ACCOUNT: ${{ secrets.CDK_DEFAULT_ACCOUNT }}
        CDK_DEFAULT_REGION: ${{ vars.CDK_DEFAULT_REGION }}
        APP_NAME: ${{ vars.APP_NAME }}
        NODE_ENV: ${{ vars.NODE_ENV }}

  deploy-frontend:
    needs: deploy-backend
    runs-on: ubuntu-latest
    outputs:
      frontend-url: ${{ steps.deploy-frontend.outputs.frontend-url }}
      cloudfront-id: ${{ steps.deploy-frontend.outputs.cloudfront-id }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: infra/package-lock.json

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.CDK_DEFAULT_REGION }}

    - name: Install dependencies
      working-directory: ./infra
      run: npm ci

    - name: Deploy Frontend Infrastructure
      id: deploy-frontend
      working-directory: ./infra
      run: |
        npx cdk deploy ${APP_NAME}FrontendStack --require-approval never
        FRONTEND_URL=$(aws cloudformation describe-stacks --stack-name ${APP_NAME}FrontendStack --query 'Stacks[0].Outputs[?OutputKey==`FrontendUrl`].OutputValue' --output text)
        CLOUDFRONT_ID=$(aws cloudformation describe-stacks --stack-name ${APP_NAME}FrontendStack --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' --output text)
        echo "frontend-url=$FRONTEND_URL" >> $GITHUB_OUTPUT
        echo "cloudfront-id=$CLOUDFRONT_ID" >> $GITHUB_OUTPUT
      env:
        CDK_DEFAULT_ACCOUNT: ${{ secrets.CDK_DEFAULT_ACCOUNT }}
        CDK_DEFAULT_REGION: ${{ vars.CDK_DEFAULT_REGION }}
        APP_NAME: ${{ vars.APP_NAME }}
        NODE_ENV: ${{ vars.NODE_ENV }}

    - name: Setup Node.js for frontend build
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build frontend
      working-directory: ./frontend
      run: |
        export NEXT_PUBLIC_API_URL="${{ needs.deploy-backend.outputs.alb-url }}"
        npm run build
      env:
        NODE_ENV: ${{ vars.NODE_ENV }}

    - name: Deploy frontend to S3
      working-directory: ./frontend
      run: |
        BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name ${APP_NAME}FrontendStack --query 'Stacks[0].Outputs[?OutputKey==`FrontendBucketName`].OutputValue' --output text)
        aws s3 sync out/ s3://$BUCKET_NAME --delete
      env:
        APP_NAME: ${{ vars.APP_NAME }}

    - name: Invalidate CloudFront cache
      run: |
        aws cloudfront create-invalidation --distribution-id ${{ steps.deploy-frontend.outputs.cloudfront-id }} --paths "/*"
      env:
        APP_NAME: ${{ vars.APP_NAME }}

  update-api-cors:
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.CDK_DEFAULT_REGION }}

    - name: Update API CORS configuration
      run: |
        # Get the ECS service name
        SERVICE_NAME=$(aws ecs list-services --cluster ${APP_NAME}EcsCluster --query 'serviceArns[0]' --output text | cut -d'/' -f3)
        
        # Update the task definition with new CORS_ORIGIN
        TASK_DEF_ARN=$(aws ecs describe-services --cluster ${APP_NAME}EcsCluster --services $SERVICE_NAME --query 'services[0].taskDefinition' --output text)
        TASK_DEF=$(aws ecs describe-task-definition --task-definition $TASK_DEF_ARN --query 'taskDefinition' --output json)
        
        # Update environment variables to include CORS_ORIGIN
        UPDATED_TASK_DEF=$(echo $TASK_DEF | jq '.containerDefinitions[0].environment += [{"name": "CORS_ORIGIN", "value": "'${{ needs.deploy-frontend.outputs.frontend-url }}'"}]')
        
        # Register new task definition
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$UPDATED_TASK_DEF" --query 'taskDefinition.taskDefinitionArn' --output text)
        
        # Update service to use new task definition
        aws ecs update-service --cluster ${APP_NAME}EcsCluster --service $SERVICE_NAME --task-definition $NEW_TASK_DEF_ARN
      env:
        APP_NAME: ${{ vars.APP_NAME }}
        NODE_ENV: ${{ vars.NODE_ENV }}