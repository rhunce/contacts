name: Deploy Full Stack

on:
  push:
    branches: [ main, master ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'infra/**'
  workflow_dispatch: # Manual trigger

env:
  NODE_VERSION: '18'
  CDK_DEFAULT_ACCOUNT: ${{ secrets.CDK_DEFAULT_ACCOUNT }}
  CDK_DEFAULT_REGION: ${{ vars.CDK_DEFAULT_REGION }}
  APP_NAME: ${{ vars.APP_NAME }}
  NODE_ENV: ${{ vars.NODE_ENV }}
  ROOT_DOMAIN: ${{ vars.ROOT_DOMAIN }}

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    outputs:
      alb-url: ${{ steps.deploy.outputs.alb-url }}
      api-url: ${{ steps.deploy.outputs.api-url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: infra/package-lock.json

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.CDK_DEFAULT_REGION }}

    - name: Install dependencies
      working-directory: ./infra
      run: npm ci --include=dev

    - name: CDK Bootstrap
      working-directory: ./infra
      run: npx cdk bootstrap aws://${{ env.CDK_DEFAULT_ACCOUNT }}/${{ env.CDK_DEFAULT_REGION }}
      continue-on-error: true

    - name: Deploy Backend Stack
      id: deploy
      working-directory: ./infra
      run: |
        # Set CORS_ORIGIN for the backend deployment
        export CORS_ORIGIN="https://${ROOT_DOMAIN}"
        echo "Setting CORS_ORIGIN to: $CORS_ORIGIN"
        
        npx cdk deploy ${APP_NAME}BackendStack --require-approval never
        ALB_URL=$(aws cloudformation describe-stacks --stack-name ${APP_NAME}BackendStack --query 'Stacks[0].Outputs[?OutputKey==`AlbUrl`].OutputValue' --output text)
        API_URL=$(aws cloudformation describe-stacks --stack-name ${APP_NAME}BackendStack --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' --output text)
        echo "alb-url=$ALB_URL" >> $GITHUB_OUTPUT
        echo "api-url=$API_URL" >> $GITHUB_OUTPUT

  deploy-frontend:
    needs: deploy-backend
    runs-on: ubuntu-latest
    outputs:
      frontend-url: ${{ steps.deploy-frontend.outputs.frontend-url }}
      cloudfront-id: ${{ steps.deploy-frontend.outputs.cloudfront-id }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: infra/package-lock.json

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.CDK_DEFAULT_REGION }}

    - name: Install dependencies
      working-directory: ./infra
      run: npm ci --include=dev

    - name: Deploy Frontend Infrastructure
      id: deploy-frontend
      working-directory: ./infra
      run: |
        npx cdk deploy ${APP_NAME}FrontendStack --require-approval never
        FRONTEND_URL=$(aws cloudformation describe-stacks --stack-name ${APP_NAME}FrontendStack --query 'Stacks[0].Outputs[?OutputKey==`FrontendUrl`].OutputValue' --output text)
        CLOUDFRONT_ID=$(aws cloudformation describe-stacks --stack-name ${APP_NAME}FrontendStack --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' --output text)
        echo "frontend-url=$FRONTEND_URL" >> $GITHUB_OUTPUT
        echo "cloudfront-id=$CLOUDFRONT_ID" >> $GITHUB_OUTPUT

    - name: Setup Node.js for frontend build
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci --include=dev

    - name: Build frontend
      working-directory: ./frontend
      run: |
        export NEXT_PUBLIC_API_URL="${{ needs.deploy-backend.outputs.api-url }}"
        npm run build

    - name: Deploy frontend to S3
      working-directory: ./frontend
      run: |
        BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name ${APP_NAME}FrontendStack --query 'Stacks[0].Outputs[?OutputKey==`FrontendBucketName`].OutputValue' --output text)
        aws s3 sync out/ s3://$BUCKET_NAME --delete

    - name: Invalidate CloudFront cache
      run: aws cloudfront create-invalidation --distribution-id ${{ steps.deploy-frontend.outputs.cloudfront-id }} --paths "/*"

    - name: Deployment Summary
      run: |
        echo "🎉 Full stack deployment completed successfully!"
        echo "🌐 Frontend URL: ${{ steps.deploy-frontend.outputs.frontend-url }}"
        echo "🔗 Backend API URL: ${{ needs.deploy-backend.outputs.api-url }}"
        echo "🔒 CORS configured for: https://${ROOT_DOMAIN}"

  # CORS is now set during backend deployment, no post-deployment update needed
