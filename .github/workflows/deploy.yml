name: Deploy Full Stack

on:
  push:
    branches: [ main, master ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'infra/**'
  workflow_dispatch: # Manual trigger

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    outputs:
      alb-url: ${{ steps.deploy.outputs.alb-url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: infra/package-lock.json

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.CDK_DEFAULT_REGION }}

    - name: Install dependencies
      working-directory: ./infra
      run: npm ci

    - name: CDK Bootstrap
      working-directory: ./infra
      run: npx cdk bootstrap aws://${{ secrets.CDK_DEFAULT_ACCOUNT }}/${{ vars.CDK_DEFAULT_REGION }}
      env:
        CDK_DEFAULT_ACCOUNT: ${{ secrets.CDK_DEFAULT_ACCOUNT }}
        CDK_DEFAULT_REGION: ${{ vars.CDK_DEFAULT_REGION }}
        APP_NAME: ${{ vars.APP_NAME }}
      continue-on-error: true

    - name: Deploy Backend Stack
      id: deploy
      working-directory: ./infra
      run: |
        npx cdk deploy ${APP_NAME}BackendStack --require-approval never
        ALB_URL=$(aws cloudformation describe-stacks --stack-name ${APP_NAME}BackendStack --query 'Stacks[0].Outputs[?OutputKey==`AlbUrl`].OutputValue' --output text)
        echo "alb-url=$ALB_URL" >> $GITHUB_OUTPUT
      env:
        CDK_DEFAULT_ACCOUNT: ${{ secrets.CDK_DEFAULT_ACCOUNT }}
        CDK_DEFAULT_REGION: ${{ vars.CDK_DEFAULT_REGION }}
        APP_NAME: ${{ vars.APP_NAME }}
        NODE_ENV: ${{ vars.NODE_ENV }}

  deploy-frontend:
    needs: deploy-backend
    runs-on: ubuntu-latest
    outputs:
      frontend-url: ${{ steps.deploy-frontend.outputs.frontend-url }}
      cloudfront-id: ${{ steps.deploy-frontend.outputs.cloudfront-id }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: infra/package-lock.json

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.CDK_DEFAULT_REGION }}

    - name: Install dependencies
      working-directory: ./infra
      run: npm ci

    - name: Deploy Frontend Infrastructure
      id: deploy-frontend
      working-directory: ./infra
      run: |
        npx cdk deploy ${APP_NAME}FrontendStack --require-approval never
        FRONTEND_URL=$(aws cloudformation describe-stacks --stack-name ${APP_NAME}FrontendStack --query 'Stacks[0].Outputs[?OutputKey==`FrontendUrl`].OutputValue' --output text)
        CLOUDFRONT_ID=$(aws cloudformation describe-stacks --stack-name ${APP_NAME}FrontendStack --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' --output text)
        echo "frontend-url=$FRONTEND_URL" >> $GITHUB_OUTPUT
        echo "cloudfront-id=$CLOUDFRONT_ID" >> $GITHUB_OUTPUT
      env:
        CDK_DEFAULT_ACCOUNT: ${{ secrets.CDK_DEFAULT_ACCOUNT }}
        CDK_DEFAULT_REGION: ${{ vars.CDK_DEFAULT_REGION }}
        APP_NAME: ${{ vars.APP_NAME }}
        NODE_ENV: ${{ vars.NODE_ENV }}

    - name: Setup Node.js for frontend build
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build frontend
      working-directory: ./frontend
      run: |
        export NEXT_PUBLIC_API_URL="${{ needs.deploy-backend.outputs.alb-url }}"
        npm run build
      env:
        NODE_ENV: ${{ vars.NODE_ENV }}

    - name: Deploy frontend to S3
      working-directory: ./frontend
      run: |
        BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name ${APP_NAME}FrontendStack --query 'Stacks[0].Outputs[?OutputKey==`FrontendBucketName`].OutputValue' --output text)
        aws s3 sync out/ s3://$BUCKET_NAME --delete
      env:
        APP_NAME: ${{ vars.APP_NAME }}

    - name: Invalidate CloudFront cache
      run: |
        aws cloudfront create-invalidation --distribution-id ${{ steps.deploy-frontend.outputs.cloudfront-id }} --paths "/*"
      env:
        APP_NAME: ${{ vars.APP_NAME }}

  update-api-cors:
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.CDK_DEFAULT_REGION }}

    - name: Update API CORS configuration
      run: |
        # Set variables
        CLUSTER_NAME="${APP_NAME}EcsCluster"
        echo "Looking for ECS cluster: $CLUSTER_NAME"
        
        # Check if cluster exists
        if ! aws ecs describe-clusters --clusters "$CLUSTER_NAME" --query 'clusters[0].status' --output text 2>/dev/null | grep -q "ACTIVE"; then
          echo "ERROR: ECS cluster '$CLUSTER_NAME' not found or not active"
          echo "Available clusters:"
          aws ecs list-clusters --output table
          exit 1
        fi
        
        echo "ECS cluster '$CLUSTER_NAME' found and active"
        
        # Get the ECS service name with error handling
        SERVICE_ARNS=$(aws ecs list-services --cluster "$CLUSTER_NAME" --query 'serviceArns' --output text)
        
        if [ -z "$SERVICE_ARNS" ]; then
          echo "ERROR: No services found in cluster '$CLUSTER_NAME'"
          echo "This might indicate the backend deployment failed"
          exit 1
        fi
        
        SERVICE_NAME=$(echo "$SERVICE_ARNS" | cut -d'/' -f3)
        echo "Found ECS service: $SERVICE_NAME"
        
        # Verify service exists and is stable
        SERVICE_STATUS=$(aws ecs describe-services --cluster "$CLUSTER_NAME" --services "$SERVICE_NAME" --query 'services[0].status' --output text)
        
        if [ "$SERVICE_STATUS" != "ACTIVE" ]; then
          echo "WARNING: ECS service '$SERVICE_NAME' is not active (status: $SERVICE_STATUS)"
          echo "Waiting for service to become stable..."
          aws ecs wait services-stable --cluster "$CLUSTER_NAME" --services "$SERVICE_NAME" || {
            echo "ERROR: Service did not become stable within timeout"
            exit 1
          }
        fi
        
        echo "ECS service '$SERVICE_NAME' is active and stable"
        
        # Get current task definition
        TASK_DEF_ARN=$(aws ecs describe-services --cluster "$CLUSTER_NAME" --services "$SERVICE_NAME" --query 'services[0].taskDefinition' --output text)
        
        if [ -z "$TASK_DEF_ARN" ] || [ "$TASK_DEF_ARN" = "None" ]; then
          echo "ERROR: Could not get task definition ARN for service '$SERVICE_NAME'"
          exit 1
        fi
        
        echo "Current task definition: $TASK_DEF_ARN"
        
        # Get task definition details
        TASK_DEF=$(aws ecs describe-task-definition --task-definition "$TASK_DEF_ARN" --query 'taskDefinition' --output json)
        
        if [ -z "$TASK_DEF" ]; then
          echo "ERROR: Could not get task definition details"
          exit 1
        fi
        
        # Check if CORS_ORIGIN already exists
        EXISTING_CORS=$(echo "$TASK_DEF" | jq -r '.containerDefinitions[0].environment[] | select(.name=="CORS_ORIGIN") | .value // empty')
        
        if [ "$EXISTING_CORS" = "${{ needs.deploy-frontend.outputs.frontend-url }}" ]; then
          echo "CORS_ORIGIN already set correctly to: ${{ needs.deploy-frontend.outputs.frontend-url }}"
          echo "No update needed"
        else
          echo "Updating CORS_ORIGIN to: ${{ needs.deploy-frontend.outputs.frontend-url }}"
          
          # Remove existing CORS_ORIGIN if it exists
          TASK_DEF_NO_CORS=$(echo "$TASK_DEF" | jq 'del(.containerDefinitions[0].environment[] | select(.name=="CORS_ORIGIN"))')
          
          # Add new CORS_ORIGIN
          UPDATED_TASK_DEF=$(echo "$TASK_DEF_NO_CORS" | jq '.containerDefinitions[0].environment += [{"name": "CORS_ORIGIN", "value": "'${{ needs.deploy-frontend.outputs.frontend-url }}'"}]')
          
          # Register new task definition
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$UPDATED_TASK_DEF" --query 'taskDefinition.taskDefinitionArn' --output text)
          
          if [ -z "$NEW_TASK_DEF_ARN" ]; then
            echo "ERROR: Failed to register new task definition"
            exit 1
          fi
          
          echo "New task definition registered: $NEW_TASK_DEF_ARN"
          
          # Update service to use new task definition
          aws ecs update-service --cluster "$CLUSTER_NAME" --service "$SERVICE_NAME" --task-definition "$NEW_TASK_DEF_ARN"
          
          if [ $? -eq 0 ]; then
            echo "Service updated successfully"
            echo "Waiting for service to stabilize..."
            aws ecs wait services-stable --cluster "$CLUSTER_NAME" --services "$SERVICE_NAME"
            echo "Service is now stable"
          else
            echo "ERROR: Failed to update service"
            exit 1
          fi
        fi
      env:
        APP_NAME: ${{ vars.APP_NAME }}
        NODE_ENV: ${{ vars.NODE_ENV }}

    - name: Output deployment info
      run: |
        echo "Full stack deployment completed successfully!"
        echo "Frontend URL: ${{ needs.deploy-frontend.outputs.frontend-url }}"
        echo "Backend URL: ${{ needs.deploy-backend.outputs.alb-url }}"