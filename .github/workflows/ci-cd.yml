name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'infra/**'
  workflow_dispatch: # Manual trigger

env:
  NODE_VERSION: '18'
  CDK_DEFAULT_ACCOUNT: ${{ secrets.CDK_DEFAULT_ACCOUNT }}
  CDK_DEFAULT_REGION: ${{ vars.CDK_DEFAULT_REGION }}
  APP_NAME: ${{ vars.APP_NAME }}
  NODE_ENV: ${{ vars.NODE_ENV }}
  ROOT_DOMAIN: ${{ vars.ROOT_DOMAIN }}
  FRONTEND_SUBDOMAIN: ${{ vars.FRONTEND_SUBDOMAIN }}
  MAX_USERS: ${{ vars.MAX_USERS }}
  MAX_CONTACTS_PER_USER: ${{ vars.MAX_CONTACTS_PER_USER }}

jobs:
  test-and-validate:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: contacts_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci --include=dev
    
    - name: Run backend tests
      working-directory: ./backend
      run: npm test
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/contacts_test
    
    - name: Generate test coverage
      working-directory: ./backend
      run: npm run test:coverage
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/contacts_test
    
    - name: Build backend
      working-directory: ./backend
      run: npm run build
    
    - name: Security audit
      working-directory: ./backend
      run: npm audit --audit-level=moderate
    
    - name: Check for high-severity vulnerabilities
      working-directory: ./backend
      run: npm audit --audit-level=high
    
    - name: Setup frontend Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci --include=dev
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  deploy-backend:
    runs-on: ubuntu-latest
    needs: test-and-validate
    outputs:
      alb-url: ${{ steps.deploy.outputs.alb-url }}
      api-url: ${{ steps.deploy.outputs.api-url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: infra/requirements.txt

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.CDK_DEFAULT_REGION }}

    - name: Install Python dependencies
      working-directory: ./infra
      run: pip install -r requirements.txt

    - name: Setup Node.js for CDK
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install CDK CLI
      run: npm install -g aws-cdk

    - name: CDK Bootstrap
      working-directory: ./infra
      run: cdk bootstrap aws://${{ env.CDK_DEFAULT_ACCOUNT }}/${{ env.CDK_DEFAULT_REGION }}
      continue-on-error: true

    - name: Deploy Backend Stack
      id: deploy
      working-directory: ./infra
      run: |
        # Set environment variables for the backend deployment
        export CORS_ORIGIN="https://${ROOT_DOMAIN}"
        export MAX_USERS="${MAX_USERS:-50}"
        export MAX_CONTACTS_PER_USER="${MAX_CONTACTS_PER_USER:-50}"
        echo "Setting CORS_ORIGIN to: $CORS_ORIGIN"
        echo "Setting MAX_USERS to: $MAX_USERS"
        echo "Setting MAX_CONTACTS_PER_USER to: $MAX_CONTACTS_PER_USER"
        
        cdk deploy ${APP_NAME}BackendStack --require-approval never
        ALB_URL=$(aws cloudformation describe-stacks --stack-name ${APP_NAME}BackendStack --query 'Stacks[0].Outputs[?OutputKey==`AlbUrl`].OutputValue' --output text)
        API_URL=$(aws cloudformation describe-stacks --stack-name ${APP_NAME}BackendStack --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' --output text)
        echo "alb-url=$ALB_URL" >> $GITHUB_OUTPUT
        echo "api-url=$API_URL" >> $GITHUB_OUTPUT

  deploy-frontend:
    needs: deploy-backend
    runs-on: ubuntu-latest
    outputs:
      frontend-url: ${{ steps.deploy-frontend.outputs.frontend-url }}
      cloudfront-id: ${{ steps.deploy-frontend.outputs.cloudfront-id }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: infra/requirements.txt

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.CDK_DEFAULT_REGION }}

    - name: Install Python dependencies
      working-directory: ./infra
      run: pip install -r requirements.txt

    - name: Setup Node.js for CDK
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install CDK CLI
      run: npm install -g aws-cdk

    - name: Deploy Frontend Infrastructure
      id: deploy-frontend
      working-directory: ./infra
      run: |
        cdk deploy ${APP_NAME}FrontendStack --require-approval never
        FRONTEND_URL=$(aws cloudformation describe-stacks --stack-name ${APP_NAME}FrontendStack --query 'Stacks[0].Outputs[?OutputKey==`FrontendUrl`].OutputValue' --output text)
        CLOUDFRONT_ID=$(aws cloudformation describe-stacks --stack-name ${APP_NAME}FrontendStack --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' --output text)
        echo "frontend-url=$FRONTEND_URL" >> $GITHUB_OUTPUT
        echo "cloudfront-id=$CLOUDFRONT_ID" >> $GITHUB_OUTPUT

    - name: Setup Node.js for frontend build
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci --include=dev

    - name: Build frontend
      working-directory: ./frontend
      run: |
        export NODE_ENV=production
        export NEXT_PUBLIC_API_URL="${{ needs.deploy-backend.outputs.api-url }}"
        export NEXT_PUBLIC_MAX_USERS="${MAX_USERS:-50}"
        export NEXT_PUBLIC_MAX_CONTACTS_PER_USER="${MAX_CONTACTS_PER_USER:-50}"
        echo "Building frontend with:"
        echo "  NODE_ENV: $NODE_ENV"
        echo "  API URL: $NEXT_PUBLIC_API_URL"
        echo "  Max Users: $NEXT_PUBLIC_MAX_USERS"
        echo "  Max Contacts Per User: $NEXT_PUBLIC_MAX_CONTACTS_PER_USER"
        npm run build

    - name: Deploy frontend to S3
      working-directory: ./frontend
      run: |
        BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name ${APP_NAME}FrontendStack --query 'Stacks[0].Outputs[?OutputKey==`FrontendBucketName`].OutputValue' --output text)
        aws s3 sync out/ s3://$BUCKET_NAME --delete

    - name: Invalidate CloudFront cache
      run: aws cloudfront create-invalidation --distribution-id ${{ steps.deploy-frontend.outputs.cloudfront-id }} --paths "/*"

    - name: Deployment Summary
      run: |
        echo "üéâ Full stack deployment completed successfully!"
        echo "üåê Frontend URL: ${{ steps.deploy-frontend.outputs.frontend-url }}"
        echo "üîó Backend API URL: ${{ needs.deploy-backend.outputs.api-url }}"
        echo "üîí CORS configured for: https://${ROOT_DOMAIN}"
